# Enable Docker Bake for better build performance
# Set COMPOSE_BAKE=true to delegate builds to bake
x-bake-config: &bake-config
  COMPOSE_BAKE: ${COMPOSE_BAKE:-false}

services:
  # Frontend - Next.js
  frontend:
    build: 
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
    - NODE_ENV=development
    - NEXT_PUBLIC_API_URL=http://localhost:4000
    - NEXT_PUBLIC_WS_URL=ws://localhost:4000
    - INTERNAL_API_URL=http://backend:4000
    - COMPOSE_BAKE=${COMPOSE_BAKE:-false}
    volumes:
      # Mount source code for hot reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    user: "1001:1001"
    depends_on:
      - backend
    networks:
      - research_network

  # Backend - Node.js with Express
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://admin:securepassword@postgres:5432/research_db
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - AUTO_SEED=${AUTO_SEED:-false}
      - COMPOSE_BAKE=${COMPOSE_BAKE:-false}
    volumes:
      # Mount source code for hot reload
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      # Preserve container's node_modules
      - /app/node_modules
    user: "1001:1001"  # Use same user as in Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - research_network
    command: >
      sh -c "
        echo 'Starting backend with automatic migrations...' &&
        npx prisma db push --accept-data-loss &&
        npx prisma generate &&
        npm run dev
      "

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=securepassword
      - POSTGRES_DB=research_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - research_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d research_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - research_network

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - research_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  research_network:
    driver: bridge
